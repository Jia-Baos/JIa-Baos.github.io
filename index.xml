<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jia-Baos</title>
    <link>https://jia-baos.github.io/</link>
    <description>Recent content on Jia-Baos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 12 Jul 2023 08:23:07 +0800</lastBuildDate><atom:link href="https://jia-baos.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>完美转发</title>
      <link>https://jia-baos.github.io/recent-works/work7/</link>
      <pubDate>Wed, 12 Jul 2023 08:23:07 +0800</pubDate>
      
      <guid>https://jia-baos.github.io/recent-works/work7/</guid>
      <description>std::forward被称为完美转发，它的作用是保持原来的值属性不变。
#include &amp;lt;bits/stdc++.h&amp;gt; template&amp;lt;typename T&amp;gt; void print(T &amp;amp; t){ std::cout &amp;lt;&amp;lt; &amp;#34;left value&amp;#34; &amp;lt;&amp;lt; std::endl; } template&amp;lt;typename T&amp;gt; void print(T &amp;amp;&amp;amp; t){ std::cout &amp;lt;&amp;lt; &amp;#34;right value&amp;#34; &amp;lt;&amp;lt; std::endl; } template&amp;lt;typename T&amp;gt; void testForward(T &amp;amp;&amp;amp; v){ print(v); print(std::forward&amp;lt;T&amp;gt;(v)); print(std::move(v)); } int main() { std::cout &amp;lt;&amp;lt; __cplusplus &amp;lt;&amp;lt; std::endl; testForward(1); /* * left value * right value * right value */ int x = 1; testForward(x); /* * left value * left value * right value */ return 0; } 下面为 std::forward 和 std::move 的源码</description>
    </item>
    
    <item>
      <title>Concepts and Constraints</title>
      <link>https://jia-baos.github.io/recent-works/work6/</link>
      <pubDate>Tue, 11 Jul 2023 22:42:52 +0800</pubDate>
      
      <guid>https://jia-baos.github.io/recent-works/work6/</guid>
      <description>#include &amp;lt;iostream&amp;gt; #include &amp;lt;concepts&amp;gt; template &amp;lt;typename T&amp;gt; concept integral = std::is_integral_v&amp;lt;T&amp;gt;; template&amp;lt;integral T&amp;gt; T Add1(const T&amp;amp; arg) { std::cout &amp;lt;&amp;lt; &amp;#34;concept&amp;#34; &amp;lt;&amp;lt; std::endl; return arg + 44; } template &amp;lt;typename T&amp;gt; requires std::same_as&amp;lt;T, int&amp;gt; T Add2(const T&amp;amp; arg) { std::cout &amp;lt;&amp;lt; &amp;#34;requires 1&amp;#34; &amp;lt;&amp;lt; std::endl; return arg + 44; } template &amp;lt;typename T&amp;gt; T Add3(const T&amp;amp; arg) requires std::same_as&amp;lt;T, int&amp;gt; { std::cout &amp;lt;&amp;lt; &amp;#34;requires 2&amp;#34; &amp;lt;&amp;lt; std::endl; return arg + 44; } // 经由返回类型启用 template&amp;lt;typename T&amp;gt; typename std::enable_if_t&amp;lt;std::is_integral_v&amp;lt;T&amp;gt;, int&amp;gt; Add4(const T&amp;amp; arg) { std::cout &amp;lt;&amp;lt; &amp;#34;经由返回类型启用&amp;#34; &amp;lt;&amp;lt; std::endl; return arg + 44; } // 经由非类型模板形参启用 template&amp;lt;typename T, std::enable_if_t&amp;lt;std::is_integral_v&amp;lt;T&amp;gt;, int&amp;gt; = 0&amp;gt; T Add5(const T&amp;amp; arg) { std::cout &amp;lt;&amp;lt; &amp;#34;经由非类型模板形参启用&amp;#34; &amp;lt;&amp;lt; std::endl; return arg + 44; } // 经由类型模板形参启用 template&amp;lt;typename T, typename = typename std::enable_if_t&amp;lt;std::is_integral_v&amp;lt;T&amp;gt;, int&amp;gt;&amp;gt; T Add6(const T&amp;amp; arg) { std::cout &amp;lt;&amp;lt; &amp;#34;经由类型模板形参启用&amp;#34; &amp;lt;&amp;lt; std::endl; return arg + 44; } int main() { std::cout &amp;lt;&amp;lt; Add1(9) &amp;lt;&amp;lt; std::endl; std::cout &amp;lt;&amp;lt; Add2(9) &amp;lt;&amp;lt; std::endl; std::cout &amp;lt;&amp;lt; Add3(9) &amp;lt;&amp;lt; std::endl; std::cout &amp;lt;&amp;lt; Add4(9) &amp;lt;&amp;lt; std::endl; std::cout &amp;lt;&amp;lt; Add5(9) &amp;lt;&amp;lt; std::endl; std::cout &amp;lt;&amp;lt; Add6(9) &amp;lt;&amp;lt; std::endl; //std::cout &amp;lt;&amp;lt; Add1(9.</description>
    </item>
    
    <item>
      <title>Traits</title>
      <link>https://jia-baos.github.io/recent-works/work5/</link>
      <pubDate>Tue, 11 Jul 2023 15:15:37 +0800</pubDate>
      
      <guid>https://jia-baos.github.io/recent-works/work5/</guid>
      <description>Think of a trait as a small object whose main purpose is to carry information used by another object or algorithm to determine “policy” or “implementation details”. - Bjarne Stroustrup
模板的全特化、偏特化
#include &amp;lt;bits/stdc++.h&amp;gt; // 模板一般化设计 /* * 模板全特化和偏特化设计版本存在时， * 优点调用 */ template &amp;lt;typename T&amp;gt; struct MyPrint { void print() { std::cout &amp;lt;&amp;lt; &amp;#34;模板一般化设计&amp;#34; &amp;lt;&amp;lt; std::endl; } }; // 模板全特化设计 template &amp;lt;&amp;gt; struct MyPrint&amp;lt;float&amp;gt; { void print() { std::cout &amp;lt;&amp;lt; &amp;#34;模板全特化设计&amp;#34; &amp;lt;&amp;lt; std::endl; } }; // 模板偏特化设计 /* *模板特化时，可以只指定一部分而非所有模板参数， *或者是参数的一部分而非全部特性，这叫做模板的偏特化。 *一个类模板的偏特化本身是一个模板， *使用它时用户还必须为那些在特例化版本中未指定的模板参数提供实参。 */ template &amp;lt;typename T&amp;gt; struct MyPrint&amp;lt;T *&amp;gt; { void print() { std::cout &amp;lt;&amp;lt; &amp;#34;模板偏特化设计&amp;#34; &amp;lt;&amp;lt; std::endl; } }; int main(int argc, char *argv[]) { MyPrint&amp;lt;int&amp;gt; a; MyPrint&amp;lt;float&amp;gt; b; MyPrint&amp;lt;float *&amp;gt; c; a.</description>
    </item>
    
    <item>
      <title>卖柑者言</title>
      <link>https://jia-baos.github.io/recent-works/work4/</link>
      <pubDate>Mon, 10 Jul 2023 15:55:57 +0800</pubDate>
      
      <guid>https://jia-baos.github.io/recent-works/work4/</guid>
      <description>——明代、刘基
杭有卖果者，善藏柑，涉寒暑不溃。出之烨然，玉质而金色。置于市，贾十倍，人争鬻之。予贸得其一，剖之，如有烟扑口鼻，视其中，则干若败絮。予怪而问之曰：“若所市于人者，将以实笾豆，奉祭祀，供宾客乎？将炫外以惑愚瞽也？甚矣哉，为欺也！”
卖者笑曰：“吾业是有年矣，吾赖是以食吾躯。吾售之，人取之，未尝有言，而独不足子所乎？世之为欺者不寡矣，而独我也乎？吾子未之思也。今夫佩虎符、坐皋比者，洸洸乎干城之具也，果能授孙、吴之略耶？ 峨大冠、 拖长绅者，昂昂乎庙堂之器也，果能建伊、皋之业耶？盗起而不知御，民困而不知救，吏奸而不知禁，法斁而不知理，坐糜廪粟而不知耻。观其坐高堂，骑大马，醉醇醴而饫肥鲜者，孰不巍巍乎可畏，赫赫乎可象也？又何往而不金玉其外，败絮其中也哉？今子是之不察，而以察吾柑！”
予默然无以应。退而思其言，类东方生滑稽之流。岂其愤世疾邪者耶？而托于柑以讽耶？</description>
    </item>
    
    <item>
      <title>Lvalue and Rvalue</title>
      <link>https://jia-baos.github.io/recent-works/work3/</link>
      <pubDate>Mon, 10 Jul 2023 10:46:51 +0800</pubDate>
      
      <guid>https://jia-baos.github.io/recent-works/work3/</guid>
      <description>值类别 每个 C++ 表达式（带有操作数的操作符、字面量、变量名等）可按照两种独立的特性加以辨别：类型和值类别 (value category)。每个表达式都具有某种非引用类型，且每个表达式只属于三种基本值类别中的一种：纯右值 (prvalue)、亡值 (xvalue)、左值 (lvalue)。
泛左值 (glvalue)（“泛化 (generalized)”的左值）是一个表达式，其值可确定某个对象或函数的标识； 纯右值 (prvalue)（“纯 (pure)”的右值）是求值符合下列之一的表达式： 计算某个运算符的操作数的值（这种纯右值没有结果对象） 初始化某个对象（称这种纯右值有一个结果对象）。结果对象可以是变量，由 new 表达式创建的对象，由临时量实质化创建的临时对象，或者前述三类对象的成员。注意非 void 的弃值表达式有结果对象（即被实质化的临时量）。并且在作为 decltype 的操作数以外的情况下，每个类类型或数组类型的纯右值都有结果对象； 亡值 (xvalue)（“将亡 (expiring)”的值）是代表它的资源能够被重新使用的对象或位域的泛左值； 左值 (lvalue)（如此称呼的历史原因是，左值可以在赋值表达式的左边出现）是非亡值的泛左值； 右值 (rvalue)（如此称呼的历史原因是，右值可以在赋值表达式的右边出现）是纯右值或者亡值。 基本类别 左值 下列表达式是左值表达式：
变量、函数、模板形参对象 (C++20 起)或数据成员的名字，不论类型，例如 std::cin 或 std::endl。即使变量的类型是右值引用，由它的名字构成的表达式仍是左值表达式； 返回类型是左值引用的函数调用或重载运算符表达式，例如 std::getline(std::cin, str)、std::cout &amp;lt;&amp;lt; 1、str1 = str2 或 ++it； a = b，a += b，a %= b，以及所有其他内建的赋值及复合赋值表达式； ++a 和 --a，内建的前置自增与前置自减表达式； *p，内建的间接寻址表达式； a[n] 和 n[a]，内建的下标表达式，当 a[n] 中的一个操作数是数组左值时 (C++11 起)； a.m，对象成员表达式，除了 m 是成员枚举项或非静态成员函数，或者 a 是右值而 m 是对象类型的非静态数据成员的情况； p-&amp;gt;m，内建的指针成员表达式，除了 m 是成员枚举项或非静态成员函数的情况； a.</description>
    </item>
    
    <item>
      <title>Biography</title>
      <link>https://jia-baos.github.io/biography/biography/</link>
      <pubDate>Thu, 20 Apr 2023 17:04:11 +0800</pubDate>
      
      <guid>https://jia-baos.github.io/biography/biography/</guid>
      <description>Notes: Here is a link to my Github homepage, Jia-Baos.
I am pursuing my master’s degree in Shandong University of Science and Technology. My main focus is computer vision and their applications in industry, besides, i am pleased to embrace new technologies and amazing ideas.</description>
    </item>
    
    <item>
      <title>Demons Algorithm</title>
      <link>https://jia-baos.github.io/recent-works/work2/</link>
      <pubDate>Thu, 20 Apr 2023 17:04:11 +0800</pubDate>
      
      <guid>https://jia-baos.github.io/recent-works/work2/</guid>
      <description>Notes: Here is a link to my Github homepage, Jia-Baos.
This is my personal implementation of the Demons algorithm, which can be used to recover non-rigid deformation between images, enjoy yourself&amp;hellip;
Fixed Moved Warpped Res </description>
    </item>
    
    <item>
      <title>Optical Flow Estimation</title>
      <link>https://jia-baos.github.io/recent-works/work1/</link>
      <pubDate>Thu, 20 Apr 2023 17:04:11 +0800</pubDate>
      
      <guid>https://jia-baos.github.io/recent-works/work1/</guid>
      <description>Notes: Here is a link to my Github homepage, Jia-Baos.
There are many excellent works about optical flow estimation, which is closely related to our research.
Matching methods: AKAZE, DeepMatching, CPM.
Interpolation methods: LDOF, DeepFlow, EpicFlow, RicFlow.
Source code of our work will be soon available online at ACPM&amp;hellip;</description>
    </item>
    
    <item>
      <title>Basical Skills</title>
      <link>https://jia-baos.github.io/basical-skills/basicalskills/</link>
      <pubDate>Wed, 05 Apr 2023 12:08:11 +0800</pubDate>
      
      <guid>https://jia-baos.github.io/basical-skills/basicalskills/</guid>
      <description>Notes: Here is a link to my Github homepage, Jia-Baos.
C++ is the programming language i use most, python and shell are often used for scripting, furthermore, cmake and mingw wil be used for compiling across platforms.
Opencv is the 3rd party library i use most, besides, i&amp;rsquo;m also trying more 3rd party libraries such as: Blas, MKL, etc.</description>
    </item>
    
  </channel>
</rss>
