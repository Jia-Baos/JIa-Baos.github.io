<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Recent Works on Jia-Baos</title>
    <link>https://jia-baos.github.io/recent-works/</link>
    <description>Recent content in Recent Works on Jia-Baos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 10 Jul 2023 15:55:57 +0800</lastBuildDate><atom:link href="https://jia-baos.github.io/recent-works/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>卖柑者言</title>
      <link>https://jia-baos.github.io/recent-works/work4/</link>
      <pubDate>Mon, 10 Jul 2023 15:55:57 +0800</pubDate>
      
      <guid>https://jia-baos.github.io/recent-works/work4/</guid>
      <description>——明代、刘基
杭有卖果者，善藏柑，涉寒暑不溃。出之烨然，玉质而金色。置于市，贾十倍，人争鬻之。予贸得其一，剖之，如有烟扑口鼻，视其中，则干若败絮。予怪而问之曰：“若所市于人者，将以实笾豆，奉祭祀，供宾客乎？将炫外以惑愚瞽也？甚矣哉，为欺也！”
卖者笑曰：“吾业是有年矣，吾赖是以食吾躯。吾售之，人取之，未尝有言，而独不足子所乎？世之为欺者不寡矣，而独我也乎？吾子未之思也。今夫佩虎符、坐皋比者，洸洸乎干城之具也，果能授孙、吴之略耶？ 峨大冠、 拖长绅者，昂昂乎庙堂之器也，果能建伊、皋之业耶？盗起而不知御，民困而不知救，吏奸而不知禁，法斁而不知理，坐糜廪粟而不知耻。观其坐高堂，骑大马，醉醇醴而饫肥鲜者，孰不巍巍乎可畏，赫赫乎可象也？又何往而不金玉其外，败絮其中也哉？今子是之不察，而以察吾柑！”
予默然无以应。退而思其言，类东方生滑稽之流。岂其愤世疾邪者耶？而托于柑以讽耶？</description>
    </item>
    
    <item>
      <title>Lvalue and Rvalue</title>
      <link>https://jia-baos.github.io/recent-works/work3/</link>
      <pubDate>Mon, 10 Jul 2023 10:46:51 +0800</pubDate>
      
      <guid>https://jia-baos.github.io/recent-works/work3/</guid>
      <description>std::forward被称为完美转发，它的作用是保持原来的值属性不变。
#include &amp;lt;bits/stdc++.h&amp;gt; template&amp;lt;typename T&amp;gt; void print(T &amp;amp; t){ std::cout &amp;lt;&amp;lt; &amp;#34;left value&amp;#34; &amp;lt;&amp;lt; std::endl; } template&amp;lt;typename T&amp;gt; void print(T &amp;amp;&amp;amp; t){ std::cout &amp;lt;&amp;lt; &amp;#34;right value&amp;#34; &amp;lt;&amp;lt; std::endl; } template&amp;lt;typename T&amp;gt; void testForward(T &amp;amp;&amp;amp; v){ print(v); print(std::forward&amp;lt;T&amp;gt;(v)); print(std::move(v)); } int main() { std::cout &amp;lt;&amp;lt; __cplusplus &amp;lt;&amp;lt; std::endl; testForward(1); /* * left value * right value * right value */ int x = 1; testForward(x); /* * left value * left value * right value */ return 0; } 下面为 std::forward 和 std::move 的源码</description>
    </item>
    
    <item>
      <title>Demons Algorithm</title>
      <link>https://jia-baos.github.io/recent-works/work2/</link>
      <pubDate>Thu, 20 Apr 2023 17:04:11 +0800</pubDate>
      
      <guid>https://jia-baos.github.io/recent-works/work2/</guid>
      <description>Notes: Here is a link to my Github homepage, Jia-Baos.
This is my personal implementation of the Demons algorithm, which can be used to recover non-rigid deformation between images, enjoy yourself&amp;hellip;
Fixed Moved Warpped Res </description>
    </item>
    
    <item>
      <title>Optical Flow Estimation</title>
      <link>https://jia-baos.github.io/recent-works/work1/</link>
      <pubDate>Thu, 20 Apr 2023 17:04:11 +0800</pubDate>
      
      <guid>https://jia-baos.github.io/recent-works/work1/</guid>
      <description>Notes: Here is a link to my Github homepage, Jia-Baos.
There are many excellent works about optical flow estimation, which is closely related to our research.
Matching methods: AKAZE, DeepMatching, CPM.
Interpolation methods: LDOF, DeepFlow, EpicFlow, RicFlow.
Source code of our work will be soon available online at ACPM&amp;hellip;</description>
    </item>
    
  </channel>
</rss>
